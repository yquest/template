import com.moowork.gradle.node.NodeExtension
import com.moowork.gradle.node.variant.VariantBuilder
import groovy.text.SimpleTemplateEngine

plugins {
  id "com.moowork.node" version "1.3.1"
}
group 'pt.fabm'
version '1.0.0-SNAPSHOT'

node {
  version = '8.10.0'
  npmVersion = '6.7.0'
  download = true
  workDir = file("${project.buildDir}/node")
  nodeModulesDir = file("${project.projectDir}")
}

if(!hasProperty("scripts")) ext.scripts = []

ext.scripts += [
  ["name": "webpack", "path": "node_modules/webpack/bin/webpack.js", "entry": null],
  ["name": "webpack_dev_server", "path": "node_modules/webpack-dev-server/bin/webpack-dev-server.js", "entry": null]
]

ext.scripts.each{Map<String,Map<String,String>> map->
  task "create_script_${map.name}" {
    group = 'script'
    doLast{
      createNodeScriptTask(map.path, map.name, map.entry)
    }
  }
}

def createNodeScriptTask(String path, String name, String entry = null) {
  def variant = new VariantBuilder(project.extensions['node'] as NodeExtension).build()
  def nodeExec = variant.nodeExec
  def script = file("${project.projectDir}/$path")
  def cmd
  def cmdFile

  if (variant.isWindows()) cmdFile = file("${project.buildDir}/${name}.cmd")
  else cmdFile = file("${project.buildDir}/${name}.sh")

  if (entry != null)
    cmd = new SimpleTemplateEngine().createTemplate(entry).make(['nodeExec':nodeExec, 'script':script.absolutePath])
  else if (variant.isWindows())
    cmd = """${nodeExec} ${script.absolutePath} %*"""
  else
    cmd = """#!/bin/bash \n${nodeExec} ${script.absolutePath} @"""

  println "script exists?: ${script.exists()}"
  println "file created: ${cmdFile}"
  println "with content: ${cmd}"
  cmdFile.text = cmd
}

task nodeClientBuild(type: NpmTask) {
  args = ['run', 'build']
}

task nodeClientStart(type: NpmTask) {
  args = ['run', 'start']
}

task nodeClientBuildProd(type: NpmTask) {
  args = ['run', 'buildProd']
}

task nodeNoSSRBuild(type: NpmTask) {
  args = ['run', 'no-ssr']
}

task nodeSSRBuild(type: NpmTask) {
  args = ['run', 'ssr']
}

task distClean(type: Delete) {
  delete fileTree(dir: "${project.projectDir}/dist")
}

nodeClientBuild.dependsOn(npm_install)
nodeClientBuild.enabled = true
nodeClientBuildProd.dependsOn(npm_install)
nodeClientBuildProd.enabled = true
