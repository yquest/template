import com.moowork.gradle.node.NodeExtension
import com.moowork.gradle.node.variant.VariantBuilder
plugins {
  id "com.moowork.node" version "1.3.1"
}
group 'pt.fabm'
version '1.0.0-SNAPSHOT'

node {
  version = '8.10.0'
  npmVersion = '6.7.0'
  download = true
  workDir = file("${project.buildDir}/node")
  nodeModulesDir = file("${project.projectDir}")
}
task createWebpackCmd {
  doLast {
    def variant = new VariantBuilder(project.extensions['node'] as NodeExtension).build()
    def nodeExec = variant.nodeExec
    def webpackScript = file("${project.projectDir}/node_modules/webpack/bin/webpack.js")
    def cmd = """${nodeExec} ${webpackScript.absolutePath} %*"""
    def cmdFile

    if(variant.isWindows()){
      cmdFile = file("${project.buildDir}/webpack.cmd")
    }else{
      println("not accepted os to create the script")
      return
    }
    println "script webpack exists?: ${webpackScript.exists()}"
    println "file created: ${cmdFile}"
    println "with content: ${cmd}"
    cmdFile.text = cmd
  }
}

task createWebpackDevServer {
  doLast {
    def variant = new VariantBuilder(project.extensions['node'] as NodeExtension).build()
    def nodeExec = variant.nodeExec
    def wpdsScript = file("${project.projectDir}/node_modules/webpack-dev-server/bin/webpack-dev-server.js")
    def cmd = """${nodeExec} ${wpdsScript.absolutePath} %*"""
    def cmdFile

    if(variant.isWindows()){
      cmdFile = file("${project.buildDir}/wpds.cmd")
    }else{
      println("not accepted os to create the script")
      return
    }
    println "script webpack exists?: ${wpdsScript.exists()}"
    println "file created: ${cmdFile}"
    println "with content: ${cmd}"
    cmdFile.text = cmd
  }
}


task nodeClientBuild(type: NpmTask) {
  args = ['run', 'build']
}

task nodeClientStart(type: NpmTask) {
  args = ['run', 'start']
}

task nodeClientBuildProd(type: NpmTask) {
  args = ['run', 'buildProd']
}

task nodeNoSSRBuild(type: NpmTask) {
  args = ['run', 'no-ssr']
}

task nodeSSRBuild(type: NpmTask) {
  args = ['run', 'ssr']
}

task distClean(type: Delete) {
  delete fileTree(dir: "${project.projectDir}/dist")
}

nodeClientBuild.dependsOn(npm_install)
nodeClientBuild.enabled = true
nodeClientBuildProd.dependsOn(npm_install)
nodeClientBuildProd.enabled = true
