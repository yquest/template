import org.apache.tools.ant.filters.ReplaceTokens

plugins {
  id 'application'
}

application {
  mainClassName = 'io.vertx.core.Launcher'
}

configurations {
  integrationTestImplementation.extendsFrom testImplementation
  integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}


dependencies {
  if ('postgres' == findProperty('daoenv')) {
    dependencies {
      implementation project(':web:postgres-dao')
    }
  } else {
    dependencies {
      implementation project(':it-mocks:dao')
    }
  }

  implementation project(':web:rest')

  api project(':web:shared')

  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
  implementation "io.vertx:vertx-config:$vertxVersion"
  implementation "io.vertx:vertx-config-yaml:$vertxVersion"
  implementation "io.vertx:vertx-core:$vertxVersion"
  implementation "io.vertx:vertx-rx-java2:$vertxVersion"
  implementation "io.vertx:vertx-lang-kotlin:$vertxVersion"
  implementation 'org.slf4j:slf4j-api:1.7.25'
  implementation 'ch.qos.logback:logback-core:1.2.3'
  implementation 'ch.qos.logback:logback-classic:1.2.3'
  implementation group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.5.7'

  testImplementation "io.vertx:vertx-junit5:$vertxVersion"
  integrationTestImplementation "io.vertx:vertx-junit5:$vertxVersion"
  integrationTestImplementation "io.vertx:vertx-web-client:$vertxVersion"
  integrationTestRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitJupiterEngineVersion"
  integrationTestImplementation "org.junit.jupiter:junit-jupiter-api:$junitJupiterEngineVersion"
  integrationTestImplementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.9'
}

distributions {
  main {
    baseName = 'template'
    contents {
      from 'conf'
    }
  }
}

def mainVerticleName = 'pt.fabm.template.MainVerticle'
def modulesToWatch = ['rest', 'memory-dao', 'shared']
def watchForChange = "src/**/*, ${modulesToWatch.collect { "../$it/src/**/*" as String }.join(', ')}"
logger.info(watchForChange)
def doOnChange = '../../gradlew :web:main:assemble'
def conf = "${project.rootProject.projectDir}/conf"
def serverPort = 8888

run {
  args = ['run', mainVerticleName, "--redeploy=$watchForChange", "--launcher-class=$mainClassName", "-Dconf=$conf", "-Dserver.port=$serverPort", "--on-redeploy=$doOnChange"]
}

task debugApp(type: JavaExec) {
  main = 'io.vertx.core.Launcher'
  classpath = sourceSets.main.runtimeClasspath
  args = ['run', mainVerticleName]
  workingDir = '../..' as File
  systemProperty('server.port', serverPort)
  systemProperty('conf', conf)
  systemProperty('pdir', "${project.rootDir}/frontend/dist")
  systemProperty('vertx.logger-delegate-factory-class-name', 'io.vertx.core.logging.SLF4JLogDelegateFactory')
  debug = false
}

sourceSets {
  integrationTest {
    kotlin.srcDir file('src/integration-test/kotlin')
    resources.srcDir file('src/integration-test/resources')
    compileClasspath += sourceSets.main.output + sourceSets.test.output + configurations.testRuntime
    runtimeClasspath += sourceSets.main.output + sourceSets.test.output + configurations.testRuntime
  }
}

task integrationTest(type: Test) {
  group 'verification'
  description 'Runs the integration tests.'
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
}

compileTestKotlin {
  kotlinOptions.jvmTarget = '1.8'
}

compileIntegrationTestKotlin {
  kotlinOptions.jvmTarget = '1.8'
}

task copyIntellijIntegrationTestResources(type: Copy) {
  group 'intellij'
  from "$buildDir/resources/integrationTest"
  into "out/integrationTest/resources"
}
copyIntellijIntegrationTestResources.dependsOn(processIntegrationTestResources)

processIntegrationTestResources {
  filter ReplaceTokens, tokens: [
    "pdir": rootProject.property("pdir")
  ]
}

integrationTest {
  useJUnitPlatform()
  testLogging {
    events 'PASSED', 'FAILED', 'SKIPPED'
  }
}
check.dependsOn integrationTest
